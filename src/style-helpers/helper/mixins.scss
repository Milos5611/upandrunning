// ======================================================================================================
//
// Mixins
//
// ======================================================================================================
// --------------------------------------------------
// Font Face Includes
// --------------------------------------------------
@mixin declare-font-face($font-family, $font-filename, $font-weight : normal, $font-style :normal, $font-stretch : normal) {
  @font-face {
    font-family: '#{$font-family}';
    src: url('#{$font-filename}.eot');
    src: url('#{$font-filename}.eot?#iefix') format('embedded-opentype'),
        url('#{$font-filename}.woff2') format('woff2'),
         url('#{$font-filename}.woff') format('woff'),
         url('#{$font-filename}.ttf') format('truetype');
    font-style: $font-style;
    font-stretch: $font-stretch;
    font-weight: $font-weight;
  }
}

// ------------------------------------------------
// Font Styles
// ------------------------------------------------
@mixin font-smoothing() {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-smoothing: antialiased;
}

@mixin truncate-text() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Rem size calculator
@mixin font-size($sizeValue) {
	font-size: $sizeValue + px;
  font-size: ($sizeValue / 10) + rem;
}

// Pixel to unitless line height calculation
@mixin line-height($pixelLineHeight, $fontSize) {
  line-height: ($pixelLineHeight / $fontSize);
}

//  Set combined font size & line height
@mixin font-line-height-px($fontSize, $pixelLineHeight) {
  font-size: $fontSize + px;
  font-size: ($fontSize / 10) + rem;
  line-height: ($pixelLineHeight / $fontSize);
}

// Photoshop to CSS letter spacing calcuation
@mixin letter-spacing($spacingValue) {
  letter-spacing: ($spacingValue / 1000) + em;
}

// --------------------------------------------------
// Responsive Breakpoints
// --------------------------------------------------
$breakpoints: (
  'xxs' : ( min-width:  $break-xxs ),
  'xs' : ( min-width:  $break-xs  ),
  'sm' : ( min-width:  $break-sm  ),
  'md' : ( min-width:  $break-md  ),
  'lg' : ( min-width:  $break-lg  ),
  'xl' : ( min-width:  $break-xl  ),
  'xxl': ( min-width:  $break-xxl )
);

$breakpoints-max: (
  'xxxs' : (max-width: $break-xxs),
  'xxs' : ( max-width:  $break-xs  ),
  'xs' : ( max-width:  $break-sm  ),
  'sm' : ( max-width:  $break-md  ),
  'md' : ( max-width:  $break-lg  ),
  'lg' : ( max-width:  $break-xl  ),
  'xl' : ( max-width:  $break-xxl )
);

@mixin breakpoint($name) {
  @media #{inspect(map-get($breakpoints, $name))} {
    @content;
  }
}

@mixin breakpoint-width-one-off($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

@mixin breakpoint-max($name) {
  @media #{inspect(map-get($breakpoints-max, $name))} {
    @content;
  }
}

// --------------------------------------------------
// Break out style so it only applies to non-touch devices
// --------------------------------------------------
// 'state' applies to a specific action, like :hover, :active, :focus
@mixin no-touch($state: "") {
  @if $state != "" {
    @at-root .no-touch #{& + $state} {
      @content;
    }
  } @else {
    @at-root .no-touch #{&} {
      @content;
    }
  }
}

@mixin touch($state: "") {
  @if $state != "" {
    @at-root .touch #{& + $state} {
      @content;
    }
  } @else {
    @at-root .touch #{&} {
      @content;
    }
  }
}

// --------------------------------------------------
// Retina Media Query
// --------------------------------------------------
@mixin retina() {
  @media (-webkit-min-device-pixel-ratio: 2),
         (-moz-min-device-pixel-ratio: 2),
         (-o-min-device-pixel-ratio: 3/2),
         (min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @content;
  }
}

// --------------------------------------------------
// Keyframe
// --------------------------------------------------
@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@function default-transition($property, $duration: $default-animation-duration, $ease: ease-in-out, $delay: 0s) {
  @return $property $duration $ease $delay;
}

@function section-padding($top: 0, $bottom: $top) {
  @return $top 25px $bottom;
}

@function section-padding-alt($top: 0, $bottom: $top) {
  @return $top 0 $bottom;
}

// generic transform
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}
// translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}

// center vertically and/or horizontally an absolute positioned element
@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}